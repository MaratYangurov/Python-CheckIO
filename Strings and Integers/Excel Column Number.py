"""
Учитывая строку, которая представляет заголовок столбца, отображаемый на листе Excel,
верните соответствующий номер столбца.

Но как на самом деле работает нумерация столбцов Excel? Ну, номер столбца похож на десятичное число, но с основанием
(основанием) 26 и «цифрами» от A до Z. Узнайте больше о системах счисления.
Давайте посмотрим на точные цифры:
Excel   Decimal
    A   1
   ..
    Z   26
Однозначные числа закончились.
Двухзначные числа начинаются с двойной первой цифры и заканчиваются двойной последней цифрой:
Excel   Decimal
    A   1
   ..
    Z   26
   AA   27
   ..
   AZ   52
   BA   53
   ..
   BZ   78
   CA   79
   ..
   ..
   ZZ   702
Теперь очередь за трехзначными числами..
"""

from string import ascii_lowercase
def column_number(name: str) -> int:
    # your code here
    result = 0
    while name:
        """
        1. (ord(name[0]) - 64):
        • ord(name[0]) возвращает числовое значение (ASCII код) первого символа name.
        • Здесь 64 используется для преобразования кода символа в число, начиная с A, которое будет 1 (так как A имеет код ASCII 65).
        2. (26 ** (len(name) - 1)):
        • 26 здесь представляет количество букв в алфавите (от A до Z).
        • len(name) - 1 определяет степень, в которую будет возводиться 26. Например, для двухбуквенного имени это будет 26 ** 1, для трехбуквенного - 26 ** 2, и так далее.
        3. result += (26 ** (len(name) - 1)) * (ord(name[0]) - 64):
        • Эта строка выполняет вычисление числового значения столбца на основе его первой буквы (name[0]).
        • (ord(name[0]) - 64) преобразует букву в число, начиная с A=1, B=2, ..., Z=26.
        • (26 ** (len(name) - 1)) учитывает разряд буквы в имени (например, для ABV первая буква A соответствует 26 ** 2).
        """
        result += (26 ** (len(name) - 1)) * (ord(name[0]) - 64)
        """
        name = name[1:] используется для удаления первого символа из строки name.
        Это позволяет продвигаться дальше по строке, уменьшая длину строки name на один символ с каждой итерацией цикла while.
        """
        name = name[1:]

    return result
print("Example:")
print(column_number("ABV"))

# These "asserts" are used for self-checking
assert column_number("A") == 1
assert column_number("Z") == 26
assert column_number("AB") == 28
assert column_number("ZY") == 701
assert column_number("AA") == 27

print("The first mission is done! Click 'Check' to earn cool rewards!")
